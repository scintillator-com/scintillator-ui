[{"/home/lc/sites/scintillator-ui/src/index.js":"1","/home/lc/sites/scintillator-ui/src/App.js":"2","/home/lc/sites/scintillator-ui/src/reportWebVitals.js":"3","/home/lc/sites/scintillator-ui/src/components/moment.js":"4","/home/lc/sites/scintillator-ui/src/components/history.js":"5","/home/lc/sites/scintillator-ui/src/components/snippet-modal.js":"6"},{"size":479,"mtime":1607201603300,"results":"7","hashOfConfig":"8"},{"size":852,"mtime":1607201603300,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607201603300,"results":"10","hashOfConfig":"8"},{"size":3835,"mtime":1607201603300,"results":"11","hashOfConfig":"8"},{"size":7409,"mtime":1607201603300,"results":"12","hashOfConfig":"8"},{"size":6381,"mtime":1607201603300,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1mujwe6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/lc/sites/scintillator-ui/src/index.js",[],["28","29"],"/home/lc/sites/scintillator-ui/src/App.js",[],"/home/lc/sites/scintillator-ui/src/reportWebVitals.js",[],"/home/lc/sites/scintillator-ui/src/components/moment.js",[],"/home/lc/sites/scintillator-ui/src/components/history.js",[],"/home/lc/sites/scintillator-ui/src/components/snippet-modal.js",["30"],"\r\nimport React from 'react'\r\n\r\nimport './snippet-modal.css'\r\n\r\nclass SnippetModal extends React.PureComponent{\r\n  constructor( props ){\r\n    super( props )\r\n\r\n    this.state = {\r\n      'snippet': {\r\n        '_id': null,\r\n        'formatter': {\r\n          'name':     'js-fetch',\r\n          'language': 'js',\r\n          'library':  'fetch'\r\n        },\r\n        'config': {\r\n          'method': 'async',\r\n          'decode': false,\r\n          'body_params':   [],\r\n          'header_params': [],\r\n          'query_params':  []\r\n        }\r\n      }\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind( this )\r\n    this.renderRequest = this.renderRequest.bind( this )\r\n    this.upsetSnippet = this.upsetSnippet.bind( this )\r\n  }\r\n\r\n  handleChange( e ){\r\n    this.setState( state => {\r\n      //clone\r\n      const snippet = {\r\n        '_id': state.snippet._id,\r\n        'formatter': {\r\n          'name':     state.snippet.formatter.name,\r\n          'language': state.snippet.formatter.language,\r\n          'library':  state.snippet.formatter.library\r\n        },\r\n        'config': {\r\n          'method':   state.snippet.config.method,\r\n          'decode':   state.snippet.config.decode,\r\n          'body_params':   state.snippet.config.body_params.slice(),\r\n          'header_params': state.snippet.config.header_params.slice(),\r\n          'query_params':  state.snippet.config.query_params.slice()\r\n        }\r\n      }\r\n\r\n      //update\r\n      let any = false\r\n      const at = snippet.config[ e.target.name ].indexOf( e.target.value )\r\n      if( e.target.checked ){\r\n        if( at === -1 ){\r\n          any = true\r\n          snippet.config[ e.target.name ].push( e.target.value )\r\n        }\r\n      }\r\n      else{\r\n        if( at > -1 ){\r\n          any = true\r\n          snippet.config[ e.target.name ].splice( at, 1 )\r\n        }\r\n      }\r\n\r\n      if( any ){\r\n        return { snippet }\r\n      }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    if( !this.props.moment ){\r\n      return (\r\n        <span>Loading...</span>\r\n      )\r\n    }\r\n\r\n    //TODO: if _id, provide preview...\r\n\r\n    return (\r\n      <div id=\"snippet-wrapper\">\r\n        <div id=\"snippet\">\r\n          <a className=\"close\" href=\"#close\" onClick={this.props.handleModalClose}>Ã—</a>\r\n          <p>Select the arguments to use in your Snippet</p>\r\n          <table style={{ marginLeft: 'auto', marginRight: 'auto', overflowX: 'hidden' }}>\r\n          {this.renderRequest( this.props.moment.request, true )}\r\n          </table>\r\n          <br />\r\n          <button style={{ float: 'right' }} onClick={this.upsetSnippet}>Create Snippet</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRequest( request ){\r\n    return (\r\n      <tbody>\r\n      <tr>\r\n        <td colSpan=\"3\" style={{ background: '#ccc' }}>\r\n          <h3>Request</h3>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td><input type=\"checkbox\" checked disabled /></td>\r\n        <td><strong>{request.method}</strong></td>\r\n        <td>{request.host} <span className=\"icon-lock\">{request.scheme}</span></td>\r\n      </tr>\r\n      <tr>\r\n        <td><input type=\"checkbox\" checked disabled /></td>\r\n        <td align=\"right\">path</td>\r\n        <td colSpan=\"2\">{request.path}</td>\r\n      </tr>\r\n\r\n      {this.renderQuery( request )}\r\n      {this.renderHeaders( request.headers )}\r\n      {this.renderBody( request.body )}\r\n\r\n      </tbody>\r\n    )\r\n  }\r\n\r\n  renderBody( body ){\r\n    if( !body || !Object.keys( body ).length )\r\n      return null\r\n\r\n\r\n    const rows = []\r\n    for( let [ key, value ] of Object.entries( body ) ){\r\n      rows.push(\r\n        <tr key={`body-${key}`}>\r\n          <td><input type=\"checkbox\" name=\"body_params\" value={key} onChange={this.handleChange} /></td>\r\n          <td>{key}</td>\r\n          <td className=\"fixed-300\">{JSON.stringify(value)}</td>\r\n        </tr>\r\n      )\r\n    }\r\n\r\n    rows.unshift(\r\n      <tr key=\"header\">\r\n        <td colSpan=\"3\" style={{ background: '#ccc' }}>Body</td>\r\n      </tr>\r\n    )\r\n\r\n    return rows\r\n  }\r\n\r\n  renderHeaders( headers ){\r\n    if( !headers || !headers.length )\r\n      return null\r\n\r\n    let k, v\r\n    if( 'k' in headers[0] ){\r\n      //i = 'i'\r\n      k = 'k'\r\n      v = 'v'\r\n    }\r\n    else if( 'key' in headers[0] ){\r\n      //i = 'index'\r\n      k = 'key'\r\n      v = 'value'\r\n    }\r\n    else{\r\n      return null\r\n    }\r\n\r\n    headers.sort(( l, r ) => { return l[k] < r[k] ? -1 : 1 })\r\n    const rows = headers.map( h => (\r\n      <tr key={`header-${h[k]}`}>\r\n        <td><input type=\"checkbox\" name=\"header_params\" value={h[k]} onChange={this.handleChange} /></td>\r\n        <td>{h[k]}</td>\r\n        <td className=\"fixed-300\">{h[v]}</td>\r\n      </tr>\r\n    ))\r\n\r\n    rows.unshift(\r\n      <tr key=\"header\">\r\n        <td colSpan=\"3\" style={{ background: '#ccc' }}>Headers</td>\r\n      </tr>\r\n    )\r\n\r\n    return rows\r\n  }\r\n\r\n  renderQuery( request ){\r\n    if( !request.query_data || !request.query_data.length )\r\n      return null\r\n\r\n\r\n    let k, v\r\n    if( 'k' in request.query_data[0] ){\r\n      //i = 'i'\r\n      k = 'k'\r\n      v = 'v'\r\n    }\r\n    else if( 'key' in request.query_data[0] ){\r\n      //i = 'index'\r\n      k = 'key'\r\n      v = 'value'\r\n    }\r\n    else{\r\n      return null\r\n    }\r\n\r\n    request.query_data.sort(( l, r ) => { return l[k] < r[k] ? -1 : 1 })\r\n    const rows = request.query_data.map( h => (\r\n      <tr key={`query-${h[k]}`}>\r\n        <td><input type=\"checkbox\" name=\"query_params\" value={h[k]} onChange={this.handleChange} /></td>\r\n        <td>{h[k]}</td>\r\n        <td className=\"fixed-300\">{h[v]}</td>\r\n      </tr>\r\n    ))\r\n\r\n\r\n    rows.unshift(\r\n      <tr key=\"header\">\r\n        <td colSpan=\"2\" style={{ background: '#ccc' }}>Query</td>\r\n        <td style={{ background: '#ccc' }}>?{request.query_string}</td>\r\n      </tr>\r\n    )\r\n\r\n    return rows\r\n  }\r\n\r\n  async upsetSnippet( e ){\r\n    debugger\r\n\r\n    const config = {\r\n      'headers': {\r\n        'Accept': 'application/json'\r\n      }\r\n    }\r\n\r\n    let url\r\n    if( this.state.snippet._id ){\r\n      config.method = 'PUT'\r\n      url = `http://192.168.1.31/api/1.0/snippet/${this.state.snippet._id}`\r\n    }\r\n    else{\r\n      config.method = 'POST'\r\n      url = 'http://192.168.1.31/api/1.0/snippet'\r\n    }\r\n\r\n    try{\r\n      const res = await fetch( url, config )\r\n      const data = await res.json()\r\n      debugger\r\n    }\r\n    catch( err ){\r\n      console.warn( String(err) )\r\n    }\r\n  }\r\n}\r\n\r\nexport default SnippetModal\r\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":248,"column":13,"nodeType":"37","messageId":"38","endLine":248,"endColumn":17},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]